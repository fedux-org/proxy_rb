#!/usr/bin/env ruby
# frozen_string_literal: true

require 'webrick'
require 'webrick/httpproxy'

# Options
module Options
  def defaults
    {
      Port: 9090,
      ProxyVia: 'WEBrick HTTP Proxy'
    }
  end

  def for_authentication_proxy
    # Apache compatible Password manager
    htpasswd = WEBrick::HTTPAuth::Htpasswd.new File.expand_path('../htpasswd', __FILE__)
    # Create entry with username and password, the password is "crypt" encrypted
    htpasswd.set_passwd 'Proxy Realm', 'user', 'password'
    # Write file to disk
    htpasswd.flush

    # Authenticator
    authenticator = WEBrick::HTTPAuth::ProxyBasicAuth.new(
      Realm: 'Proxy Realm',
      UserDB: htpasswd
    )

    defaults.merge(ProxyAuthProc: authenticator.method(:authenticate).to_proc)
  end

  def for_chained_proxy
    uri = OpenStruct.new
    uri.userinfo = 'user:password'
    uri.host     = 'localhost'
    uri.port     = 9090

    defaults.merge(ProxyURI: uri)
  end

  module_function :defaults, :for_authentication_proxy, :for_chained_proxy
end

def type?(type)
  ENV['PROXY_TYPE'].to_s.to_sym == type.to_sym
end

def options
  if type? :chained_proxy
    Options.for_chained_proxy
  elsif type? :authentication_proxy
    Options.for_authentication_proxy
  elsif type? :forwarding_proxy
    Options.defaults
  else
    Options.defaults
  end
end

proxy = WEBrick::HTTPProxyServer.new options

trap('INT') { proxy.shutdown }
trap('TERM') { proxy.shutdown }

proxy.start
